{"version":3,"sources":["myFirebase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGIN_ID","appId","REACT_APP_APP_ID","firebase","initializeApp","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","data","console","log","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","editTweet","setEditTweet","onDelete","window","confirm","imageUrl","refFromURL","delete","doc","id","toggleEditing","update","autoFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","image","setImage","fileUrl","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","userId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","tweetArray","docs","map","marginTop","Profile","refreshUser","history","useHistory","displayName","newName","setNewName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","Router","isLoggedIn","maxWidth","width","margin","exact","path","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ccb4235.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import React, {useState} from 'react';\nimport {authService} from 'myFirebase';\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (e) => {\n        const {target: {name, value}} = e;\n        if (name === 'email') {\n            setEmail(value);\n        } else if (name === 'password') {\n            setPassword(value);\n        }\n    };\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            if (newAccount) {\n                await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n                await authService.signInWithEmailAndPassword(email, password);\n            }\n        } catch (error) {\n            setError(error.message);\n        }\n    };\n\n    const toggleAccount = (prev) => {\n        setNewAccount(!prev);\n    };\n\n    return (\n        <div>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input name=\"email\"\n                       value={email}\n                       onChange={onChange}\n                       type=\"text\"\n                       placeholder=\"Email\"\n                       required\n                       className=\"authInput\"/>\n                <input name=\"password\"\n                       value={password}\n                       onChange={onChange}\n                       type=\"password\"\n                       placeholder=\"Password\"\n                       required\n                       className=\"authInput\"/>\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount}  className=\"authSwitch\">\n                {newAccount ? \"회원가입 하기\" : \"로그인 하기\"}\n            </span>\n        </div>\n    );\n}\n\nexport default AuthForm;","import React from 'react';\nimport {authService, firebaseInstance} from 'myFirebase';\nimport AuthForm from \"components/AuthForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faTwitter, faGoogle, faGithub,} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n    const onSocialClick = async (e) => {\n        const {target: {name}} = e;\n        let provider;\n\n        if (name === \"google\") {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\") {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n\n        const data = await authService.signInWithPopup(provider);\n        console.log(data);\n    };\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm/>\n            <div className=\"authBtns\">\n                <button name=\"google\" onClick={onSocialClick} className=\"authBtn\">\n                    구글아이디로 로그인 <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button name=\"github\" onClick={onSocialClick} className=\"authBtn\">\n                    깃헙아이디로 로그인 <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Auth;","import React, {useState} from \"react\";\nimport {dbService, storageService} from \"myFirebase\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTrash, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Tweet = ({tweetObj, isOwner}) => {\n    const [editing, setEditing] = useState(false);\n    const [editTweet, setEditTweet] = useState(tweetObj.text);\n\n    const onDelete = async () => {\n        const isOk = window.confirm(\"트윗을 삭제하시겠습니까?\");\n        if (isOk) {\n            !!tweetObj.imageUrl && await storageService.refFromURL(tweetObj.imageUrl).delete();\n            await dbService.doc(`tweets/${tweetObj.id}`).delete(); // firebase.firestore().doc(`documentPath`)\n        }\n    };\n\n    const toggleEditing = () => {\n        setEditing((prev) => !prev);\n        setEditTweet(tweetObj.text);\n    };\n\n    const onChange = (e) => {\n        e.preventDefault();\n        const {target: {value}} = e;\n        setEditTweet(value);\n    };\n\n    const onSubmit = async () => {\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            text: editTweet,\n        });\n        setEditing(false);\n    };\n\n    return (\n        <div className=\"nweet\">\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit} className=\"container nweetEdit\">\n                        <input\n                            type=\"text\"\n                            onChange={onChange}\n                            value={editTweet}\n                            placeholder=\"트윗을 수정합니다.\"\n                            autoFocus\n                            className=\"formInput\"\n                            required/>\n                    </form>\n                    <button type=\"submit\" onClick={onSubmit} className=\"formBtn\">저장</button>\n                    <span onClick={toggleEditing} className=\"formBtn cancelBtn\">취소</span>\n                </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.imageUrl && <img src={tweetObj.imageUrl}/>}\n                    {isOwner && (\n                        <div className=\"nweet__actions\">\n                            <span onClick={onDelete}>\n                                <FontAwesomeIcon icon={faTrash}/>\n                            </span>\n                            <span onClick={toggleEditing}>\n                                <FontAwesomeIcon icon={faPencilAlt}/>\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default Tweet;","import React, {useState} from \"react\";\nimport {dbService, storageService} from \"../myFirebase\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlus, faTimes} from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({userObj}) => {\n    const [tweet, setTweet] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        let fileUrl = \"\";\n\n        if (!tweet) {\n            return;\n        }\n\n        if (image) {\n            const fileRef = storageService\n                .ref() // firebase.storage().ref() returns Reference(https://firebase.google.com/docs/reference/js/firebase.storage.Reference)\n                .child(`${userObj.uid}/${uuidv4()}`); //파일명 임의지정 가능. 랜덤 UUID 사용\n\n            const response = await fileRef.putString(image, \"data_url\"); // Reference.putString() returns UploadTask(https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask)\n            fileUrl = await response.ref.getDownloadURL(); // await UploadTask returns UploadTaskSnapshot(https://firebase.google.com/docs/reference/js/firebase.storage.UploadTaskSnapshot)\n            console.log(\"fileUrl =>\" + fileUrl);\n        }\n\n        const tweetObj = {\n            text: tweet,\n            createdAt: Date.now(),\n            userId: userObj.uid,\n            imageUrl: fileUrl,\n        };\n\n        await dbService.collection(\"tweets\").add(tweetObj);\n        setTweet(\"\");\n        setImage(\"\");\n    };\n\n    const onChange = (e) => {\n        const {target: {value}} = e;\n        setTweet(value);\n    };\n\n    const onFileChange = (e) => {\n        const {target: {files}} = e;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            console.log(finishedEvent); // readAsDataURL()가 끝나면, 즉 파일을 읽은 후 트리거 발생\n            const {currentTarget: {result}} = finishedEvent;\n            setImage(result);\n        };\n        reader.readAsDataURL(theFile); // 이미지를 URL 형태로 인코딩 (브라우저를 통해 디코딩하면 이미지로 표시 가능)\n    };\n\n    const onClearImage = (e) => {\n        setImage(\"\");\n    }\n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input type=\"text\"\n                       value={tweet}\n                       onChange={onChange}\n                       placeholder=\"오늘은 어떠셨나요?\"\n                       maxLength={120}/>\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>사진 추가</span>\n                <FontAwesomeIcon icon={faPlus}/>\n            </label>\n            <input id=\"attach-file\"\n                   type=\"file\"\n                   accept=\"image/*\"\n                   onChange={onFileChange}\n                   style={{\n                       opacity: 0,\n                   }}\n            />\n            {image &&\n            <div className=\"factoryForm__attachment\">\n                <img src={image}\n                     style={{\n                         backgroundImage: image,\n                     }}\n                />\n                <div className=\"factoryForm__clear\" onClick={onClearImage}>\n                    <span>Remove</span>\n                    <FontAwesomeIcon icon={faTimes} />\n                </div>\n            </div>\n            }\n        </form>\n    );\n}\n\nexport default TweetFactory;","import React, {useEffect, useState} from \"react\";\nimport {dbService} from \"myFirebase\";\nimport Tweet from \"components/Tweet\";\nimport TweetFactory from \"components/TweetFactory\";\n\nconst Home = ({userObj}) => {\n    const [tweets, setTweets] = useState([]);\n\n    useEffect(() => {\n        dbService.collection(\"tweets\")\n            .orderBy(\"createdAt\", \"desc\")\n            .onSnapshot(snapshot => { //snapshot => QuerySnapshot\n            //snapshot.docs => QueryDocumentSnapshot\n            const tweetArray = snapshot.docs.map(doc => ({\n                id: doc.id,\n                ...doc.data(), // QueryDocumentSnapshot.data()\n            }));\n            setTweets(tweetArray);\n        })\n    }, []);\n\n    return <div className=\"container\">\n        <TweetFactory userObj={userObj}/>\n        <div style={{ marginTop: 30 }}>\n            {tweets.map((doc) => (\n                <Tweet key={doc.id}\n                       tweetObj={doc}\n                       isOwner={doc.userId === userObj.uid}\n                />\n            ))}\n        </div>\n    </div>;\n}\nexport default Home;","import React, {useState} from 'react';\nimport {authService} from \"../myFirebase\";\nimport {useHistory} from \"react-router-dom\";\n\nconst Profile = ({refreshUser, userObj}) => {\n    const history = useHistory();\n    const [newName, setNewName] = useState(userObj.displayName);\n    const onLogout = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        if (userObj.displayName !== newName) {\n            await userObj.updateProfile({\n                displayName: newName,\n            });\n            refreshUser();\n        }\n    };\n\n    const onChange = (e) => {\n        const {target: {value}} = e;\n        setNewName(value);\n    };\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input type=\"text\"\n                       onChange={onChange}\n                       placeholder=\"Display Name\"\n                       autoFocus\n                       className=\"formInput\"\n                />\n                <input type=\"submit\"\n                       value=\"저장\"\n                       className=\"formBtn\"\n                       style={{\n                           marginTop: 10,\n                       }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\"\n                  onClick={onLogout}>\n            로그아웃\n            </span>\n        </div>\n    );\n};\n\n\nexport default Profile;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({userObj}) => <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n        <li>\n            <Link to=\"/\" style={{ marginRight: 10 }}>\n                <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n            </Link>\n        </li>\n        <li>\n            <Link\n                to=\"/profile\"\n                style={{\n                    marginLeft: 10,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: 12,\n                }}\n            >\n                <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                <span style={{ marginTop: 10 }}>\n            {userObj.displayName\n                ? `${userObj.displayName}의 Profile`\n                : \"Profile\"}\n          </span>\n            </Link>\n        </li>\n    </ul>\n</nav>\n\nexport default Navigation;","import React from 'react';\nimport {HashRouter as HRouter, Route, Redirect, Switch} from 'react-router-dom';\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst Router = ({refreshUser, isLoggedIn, userObj}) => {\n\n    return (\n        <HRouter>\n            {isLoggedIn && <Navigation userObj={userObj}/>}\n            <Switch>\n                {isLoggedIn ?\n                    <div\n                        style={{\n                            maxWidth: 890,\n                            width: \"100%\",\n                            margin: \"0 auto\",\n                            marginTop: 80,\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}\n                    >\n                        <Route exact path=\"/\"><Home userObj={userObj}/></Route>\n                        <Route exact path=\"/profile\"><Profile userObj={userObj} refreshUser={refreshUser}/></Route>\n                        <Redirect from=\"*\" to=\"/\"/>\n                    </div> :\n                    <>\n                        <Route exact path=\"/\"><Auth/></Route>\n                        <Redirect from=\"*\" to=\"/\"/>\n                    </>\n                }\n            </Switch>\n        </HRouter>\n    );\n};\n\nexport default Router;","import React, {useState, useEffect} from 'react';\nimport Router from \"components/Router\";\nimport {authService} from \"myFirebase\";\n\nfunction App() {\n    const [init, setInit] = useState(false);\n    const [userObj, setUserObj] = useState(null);\n\n    // useEffect : component가 mount 될 때 시작되는 hook\n    useEffect(() => {\n        // onAuthStateChanged : 사용자의 로그인 상태의 변화를 관찰하는 firebase event listener\n        // firebase 초기화, 로그아웃, 계정 생성, 로그인 때에도 트리거 발생\n        // https://firebase.google.com/docs/auth/web/manage-users?hl=ko\n        authService.onAuthStateChanged((user) => {\n            if (user) {\n                setUserObj({\n                    displayName: user.displayName,\n                    uid: user.uid,\n                    updateProfile: (args) => user.updateProfile(args),\n                });\n            } else {\n                setUserObj(null);\n            }\n            setInit(true);\n        });\n    }, []);\n\n    const refreshUser = () => {\n        // 객체가 너무 클 경우 리액트가 변화감지를 어려워하니 object의 크기를 줄이든 새로운 객체로 인식하게끔 하면 됨!\n        // 강제인식 : setUserObj(Object.assign({}, user}\n        // 여튼 authService.currentUser에는 너무 많은 양의 정보가 담겨있기때문에 필요한 정보 uid, displayName, updateProfile()만 추출하는 방식으로 접근\n        const user = authService.currentUser;\n        setUserObj({\n            displayName: user.displayName,\n                uid: user.uid,\n                updateProfile: (args) => user.updateProfile(args),\n        });\n    }\n\n    return <>\n        {init ? <Router refreshUser={refreshUser} isLoggedIn={!!userObj} userObj={userObj}/> : \"initializing...\"}\n    </>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}